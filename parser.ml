type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LBRACKET
  | RBRACKET
  | AMP
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | AND
  | OR
  | NOT
  | GT
  | LT
  | EQ
  | GEQ
  | LEQ
  | NEQ
  | IF
  | ELSE
  | WHILE
  | FOR
  | RETURN
  | INT
  | BOOL
  | FLOAT
  | VOID
  | EXEC
  | CHR
  | STR
  | LIST
  | FUNCTION
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | CHAR of (string)
  | STRING of (string)
  | EOF
  | PIPE
  | RUN
  | EXITCODE
  | PATH
  | CONS
  | LEN

open Parsing;;
let _ = parse_error;;
# 5 "parser.mly"
 open Ast 
# 58 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LBRACKET *);
  264 (* RBRACKET *);
  265 (* AMP *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* ASSIGN *);
  271 (* AND *);
  272 (* OR *);
  273 (* NOT *);
  274 (* GT *);
  275 (* LT *);
  276 (* EQ *);
  277 (* GEQ *);
  278 (* LEQ *);
  279 (* NEQ *);
  280 (* IF *);
  281 (* ELSE *);
  282 (* WHILE *);
  283 (* FOR *);
  284 (* RETURN *);
  285 (* INT *);
  286 (* BOOL *);
  287 (* FLOAT *);
  288 (* VOID *);
  289 (* EXEC *);
  290 (* CHR *);
  291 (* STR *);
  292 (* LIST *);
  293 (* FUNCTION *);
    0 (* EOF *);
  300 (* PIPE *);
  301 (* RUN *);
  302 (* EXITCODE *);
  303 (* PATH *);
  304 (* CONS *);
  305 (* LEN *);
    0|]

let yytransl_block = [|
  294 (* LITERAL *);
  295 (* BLIT *);
  296 (* ID *);
  297 (* FLIT *);
  298 (* CHAR *);
  299 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\007\000\008\000\
\009\000\009\000\010\000\010\000\011\000\011\000\013\000\013\000\
\014\000\014\000\015\000\016\000\017\000\005\000\018\000\018\000\
\021\000\021\000\019\000\019\000\003\000\020\000\020\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\022\000\022\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\023\000\023\000\024\000\024\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\001\000\001\000\002\000\002\000\003\000\002\000\002\000\002\000\
\003\000\002\000\004\000\003\000\002\000\009\000\000\000\001\000\
\002\000\004\000\000\000\002\000\003\000\000\000\002\000\002\000\
\003\000\003\000\005\000\007\000\009\000\005\000\000\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\003\000\004\000\003\000\
\002\000\001\000\002\000\002\000\001\000\001\000\001\000\001\000\
\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\085\000\000\000\000\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\007\000\008\000\
\009\000\010\000\011\000\012\000\013\000\014\000\049\000\051\000\
\000\000\050\000\053\000\000\000\001\000\000\000\000\000\000\000\
\003\000\004\000\005\000\000\000\077\000\015\000\000\000\000\000\
\078\000\074\000\079\000\080\000\000\000\000\000\024\000\000\000\
\023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\000\000\000\000\
\016\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\073\000\
\000\000\072\000\042\000\039\000\000\000\026\000\000\000\000\000\
\000\000\041\000\000\000\000\000\000\000\000\000\000\000\037\000\
\000\000\020\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\028\000\025\000\000\000\000\000\000\000\071\000\000\000\
\027\000\000\000\000\000\000\000\022\000\000\000\000\000\046\000\
\000\000\000\000\033\000\000\000\000\000\021\000\000\000\000\000\
\035\000\000\000\044\000\000\000\000\000\034\000\000\000\036\000\
\000\000\000\000\045\000\000\000\030\000"

let yydgoto = "\002\000\
\003\000\004\000\033\000\084\000\035\000\036\000\037\000\038\000\
\039\000\065\000\099\000\040\000\041\000\049\000\042\000\043\000\
\044\000\123\000\141\000\046\000\124\000\056\000\092\000\093\000"

let yysindex = "\007\000\
\000\000\000\000\000\000\045\000\027\001\000\000\226\000\027\001\
\027\001\021\255\041\255\051\255\027\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\255\000\000\000\000\000\000\000\000\027\001\027\001\007\255\
\000\000\000\000\000\000\017\255\000\000\000\000\055\255\178\000\
\000\000\000\000\000\000\000\000\197\001\160\255\000\000\211\002\
\000\000\030\255\030\255\027\001\027\001\027\001\008\003\092\255\
\027\001\027\001\027\001\047\003\047\003\000\000\061\255\239\000\
\000\000\000\000\027\001\027\001\027\001\027\001\027\001\027\001\
\027\001\027\001\027\001\027\001\027\001\027\001\027\001\000\000\
\060\255\000\000\000\000\000\000\027\001\000\000\236\001\250\001\
\094\255\000\000\008\003\100\255\108\255\250\002\091\001\000\000\
\111\001\000\000\000\000\193\002\098\255\098\255\030\255\030\255\
\092\003\061\003\029\255\029\255\241\000\029\255\029\255\241\000\
\091\001\000\000\000\000\135\000\135\000\027\001\000\000\027\001\
\000\000\076\255\115\255\113\255\000\000\027\001\095\255\000\000\
\194\000\008\003\000\000\117\255\111\001\000\000\135\000\027\001\
\000\000\085\255\000\000\123\255\111\001\000\000\135\000\000\000\
\087\255\206\255\000\000\127\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\128\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\086\255\000\000\000\000\137\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\001\077\001\000\000\000\000\128\255\045\255\000\000\
\132\255\000\000\000\000\006\255\189\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\255\000\000\133\255\000\000\078\255\000\000\
\134\255\000\000\000\000\000\000\014\255\183\001\114\001\151\001\
\221\255\104\000\028\002\060\002\149\002\092\002\124\002\174\002\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\141\255\000\000\000\000\001\000\000\000\
\000\000\015\255\000\000\000\000\000\000\000\000\000\000\148\255\
\000\000\000\000\000\000\000\000\091\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\013\000\252\255\000\000\203\255\000\000\000\000\
\000\000\000\000\035\000\253\255\000\000\078\000\000\000\000\000\
\000\000\000\000\000\000\025\000\000\000\205\255\000\000\000\000"

let yytablesize = 1164
let yytable = "\034\000\
\043\000\045\000\089\000\048\000\050\000\051\000\076\000\001\000\
\076\000\055\000\076\000\076\000\083\000\076\000\055\000\083\000\
\055\000\084\000\055\000\055\000\084\000\055\000\052\000\055\000\
\055\000\057\000\060\000\061\000\055\000\055\000\058\000\055\000\
\055\000\055\000\055\000\055\000\055\000\059\000\067\000\068\000\
\069\000\070\000\053\000\122\000\029\000\048\000\062\000\048\000\
\087\000\088\000\055\000\076\000\054\000\091\000\094\000\095\000\
\063\000\055\000\064\000\055\000\100\000\096\000\097\000\101\000\
\102\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\081\000\081\000\070\000\138\000\
\070\000\048\000\070\000\070\000\140\000\070\000\052\000\145\000\
\052\000\017\000\052\000\052\000\090\000\052\000\118\000\052\000\
\052\000\052\000\052\000\114\000\052\000\052\000\119\000\052\000\
\052\000\052\000\052\000\052\000\052\000\069\000\070\000\127\000\
\128\000\120\000\129\000\131\000\130\000\132\000\133\000\135\000\
\137\000\070\000\100\000\070\000\142\000\143\000\148\000\096\000\
\047\000\052\000\139\000\052\000\055\000\052\000\081\000\082\000\
\031\000\054\000\147\000\054\000\018\000\054\000\054\000\032\000\
\054\000\081\000\054\000\054\000\054\000\054\000\047\000\054\000\
\054\000\144\000\054\000\054\000\054\000\054\000\054\000\054\000\
\134\000\005\000\115\000\006\000\083\000\146\000\007\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\054\000\000\000\054\000\010\000\
\054\000\011\000\012\000\013\000\000\000\075\000\000\000\075\000\
\000\000\075\000\075\000\000\000\075\000\023\000\024\000\025\000\
\026\000\027\000\028\000\000\000\030\000\000\000\031\000\005\000\
\032\000\006\000\149\000\000\000\007\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\065\000\009\000\065\000\
\000\000\065\000\065\000\000\000\065\000\010\000\000\000\011\000\
\012\000\013\000\075\000\065\000\065\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\024\000\025\000\026\000\027\000\
\028\000\000\000\030\000\000\000\031\000\000\000\032\000\000\000\
\000\000\000\000\043\000\000\000\043\000\043\000\000\000\043\000\
\065\000\000\000\065\000\043\000\000\000\000\000\067\000\000\000\
\067\000\043\000\067\000\067\000\000\000\067\000\000\000\000\000\
\043\000\000\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\000\000\043\000\005\000\043\000\
\006\000\043\000\000\000\007\000\000\000\000\000\000\000\008\000\
\000\000\067\000\000\000\067\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\011\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\000\000\030\000\000\000\031\000\038\000\032\000\038\000\038\000\
\000\000\038\000\000\000\000\000\000\000\038\000\000\000\000\000\
\066\000\000\000\066\000\038\000\066\000\066\000\000\000\066\000\
\000\000\000\000\038\000\000\000\038\000\038\000\038\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\000\000\038\000\
\005\000\038\000\006\000\038\000\000\000\007\000\000\000\000\000\
\000\000\008\000\000\000\066\000\000\000\066\000\000\000\009\000\
\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\
\011\000\012\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\023\000\024\000\025\000\026\000\
\027\000\028\000\066\000\030\000\000\000\031\000\000\000\032\000\
\000\000\000\000\000\000\067\000\068\000\069\000\070\000\000\000\
\071\000\072\000\136\000\073\000\074\000\075\000\076\000\077\000\
\078\000\000\000\000\000\067\000\068\000\069\000\070\000\000\000\
\071\000\072\000\000\000\073\000\074\000\075\000\076\000\077\000\
\078\000\000\000\000\000\000\000\000\000\079\000\000\000\080\000\
\000\000\081\000\000\000\005\000\000\000\000\000\000\000\000\000\
\007\000\047\000\000\000\000\000\008\000\079\000\000\000\080\000\
\005\000\081\000\009\000\098\000\000\000\007\000\000\000\000\000\
\000\000\008\000\067\000\068\000\069\000\070\000\000\000\009\000\
\000\000\000\000\073\000\074\000\000\000\076\000\077\000\023\000\
\024\000\025\000\026\000\027\000\028\000\000\000\030\000\000\000\
\031\000\000\000\032\000\000\000\023\000\024\000\025\000\026\000\
\027\000\028\000\000\000\030\000\005\000\031\000\000\000\032\000\
\081\000\007\000\000\000\000\000\000\000\008\000\000\000\000\000\
\068\000\000\000\068\000\009\000\068\000\068\000\000\000\068\000\
\000\000\068\000\068\000\068\000\068\000\000\000\068\000\068\000\
\000\000\068\000\068\000\068\000\068\000\068\000\068\000\000\000\
\023\000\024\000\025\000\026\000\027\000\028\000\000\000\030\000\
\000\000\031\000\000\000\032\000\000\000\069\000\000\000\069\000\
\000\000\069\000\069\000\068\000\069\000\068\000\069\000\069\000\
\069\000\069\000\000\000\069\000\069\000\000\000\069\000\069\000\
\069\000\069\000\069\000\069\000\067\000\068\000\069\000\070\000\
\000\000\071\000\072\000\000\000\073\000\074\000\075\000\076\000\
\077\000\078\000\057\000\000\000\057\000\000\000\057\000\057\000\
\069\000\057\000\069\000\057\000\057\000\057\000\057\000\000\000\
\057\000\057\000\000\000\057\000\057\000\057\000\057\000\057\000\
\057\000\000\000\081\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\000\000\000\000\000\000\058\000\
\000\000\058\000\000\000\058\000\058\000\057\000\058\000\057\000\
\058\000\058\000\058\000\058\000\000\000\058\000\058\000\000\000\
\058\000\058\000\058\000\058\000\058\000\058\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\056\000\
\000\000\056\000\000\000\056\000\056\000\000\000\056\000\000\000\
\056\000\056\000\058\000\000\000\058\000\056\000\056\000\082\000\
\056\000\056\000\056\000\056\000\056\000\056\000\067\000\068\000\
\069\000\070\000\000\000\071\000\072\000\000\000\073\000\074\000\
\075\000\076\000\077\000\078\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\000\000\056\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\116\000\000\000\
\079\000\000\000\080\000\000\000\081\000\067\000\068\000\069\000\
\070\000\000\000\071\000\072\000\117\000\073\000\074\000\075\000\
\076\000\077\000\078\000\067\000\068\000\069\000\070\000\000\000\
\071\000\072\000\000\000\073\000\074\000\075\000\076\000\077\000\
\078\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
\000\000\080\000\000\000\081\000\063\000\000\000\063\000\000\000\
\063\000\063\000\000\000\063\000\000\000\079\000\000\000\080\000\
\000\000\081\000\063\000\063\000\000\000\063\000\063\000\063\000\
\063\000\063\000\063\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\061\000\000\000\061\000\000\000\
\061\000\061\000\000\000\061\000\000\000\000\000\000\000\063\000\
\000\000\063\000\061\000\061\000\000\000\061\000\061\000\061\000\
\061\000\061\000\061\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\000\000\000\064\000\000\000\
\064\000\064\000\000\000\064\000\000\000\000\000\000\000\061\000\
\000\000\061\000\064\000\064\000\000\000\064\000\064\000\064\000\
\064\000\064\000\064\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\000\000\000\062\000\000\000\
\062\000\062\000\000\000\062\000\000\000\000\000\000\000\064\000\
\000\000\064\000\062\000\062\000\000\000\062\000\062\000\062\000\
\062\000\062\000\062\000\000\000\000\000\059\000\000\000\059\000\
\000\000\059\000\059\000\000\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\059\000\000\000\000\000\062\000\
\059\000\062\000\000\000\059\000\000\000\000\000\060\000\000\000\
\060\000\000\000\060\000\060\000\000\000\060\000\000\000\000\000\
\000\000\000\000\000\000\000\000\060\000\060\000\000\000\000\000\
\059\000\060\000\059\000\000\000\060\000\125\000\126\000\000\000\
\000\000\000\000\067\000\068\000\069\000\070\000\000\000\071\000\
\072\000\000\000\073\000\074\000\075\000\076\000\077\000\078\000\
\085\000\060\000\086\000\060\000\067\000\068\000\069\000\070\000\
\000\000\071\000\072\000\000\000\073\000\074\000\075\000\076\000\
\077\000\078\000\000\000\000\000\079\000\000\000\080\000\000\000\
\081\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\079\000\000\000\
\080\000\121\000\081\000\067\000\068\000\069\000\070\000\000\000\
\071\000\072\000\000\000\073\000\074\000\075\000\076\000\077\000\
\078\000\067\000\068\000\069\000\070\000\000\000\071\000\072\000\
\000\000\073\000\074\000\075\000\076\000\077\000\078\000\000\000\
\000\000\000\000\000\000\000\000\000\000\079\000\000\000\080\000\
\000\000\081\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\000\000\080\000\000\000\081\000\
\067\000\068\000\069\000\070\000\000\000\071\000\072\000\000\000\
\073\000\074\000\075\000\076\000\077\000\078\000\067\000\068\000\
\069\000\070\000\000\000\071\000\000\000\000\000\073\000\074\000\
\075\000\076\000\077\000\078\000\000\000\000\000\000\000\000\000\
\000\000\000\000\079\000\000\000\000\000\000\000\081\000\000\000\
\000\000\000\000\000\000\000\000\000\000\067\000\068\000\069\000\
\070\000\000\000\000\000\000\000\081\000\073\000\074\000\075\000\
\076\000\077\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000"

let yycheck = "\004\000\
\000\000\005\000\054\000\007\000\008\000\009\000\001\001\001\000\
\003\001\013\000\005\001\006\001\003\001\008\001\001\001\006\001\
\003\001\003\001\005\001\006\001\006\001\008\001\002\001\010\001\
\011\001\002\001\030\000\031\000\015\001\016\001\007\001\018\001\
\019\001\020\001\021\001\022\001\023\001\014\001\010\001\011\001\
\012\001\013\001\002\001\097\000\000\000\001\001\040\001\003\001\
\052\000\053\000\054\000\046\001\002\001\057\000\058\000\059\000\
\040\001\044\001\004\001\046\001\064\000\001\001\002\001\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\048\001\048\001\001\001\133\000\
\003\001\085\000\005\001\006\001\136\000\008\001\001\001\141\000\
\003\001\004\001\005\001\006\001\001\001\008\001\001\001\010\001\
\011\001\012\001\013\001\040\001\015\001\016\001\003\001\018\001\
\019\001\020\001\021\001\022\001\023\001\012\001\013\001\116\000\
\117\000\006\001\118\000\040\001\120\000\003\001\006\001\025\001\
\004\001\044\001\126\000\046\001\040\001\003\001\040\001\001\001\
\001\001\044\001\135\000\046\001\136\000\048\001\003\001\003\001\
\003\001\001\001\143\000\003\001\004\001\005\001\006\001\003\001\
\008\001\048\001\010\001\011\001\012\001\013\001\003\001\015\001\
\016\001\141\000\018\001\019\001\020\001\021\001\022\001\023\001\
\126\000\002\001\085\000\004\001\005\001\141\000\007\001\255\255\
\255\255\255\255\011\001\255\255\255\255\255\255\255\255\255\255\
\017\001\255\255\255\255\255\255\044\001\255\255\046\001\024\001\
\048\001\026\001\027\001\028\001\255\255\001\001\255\255\003\001\
\255\255\005\001\006\001\255\255\008\001\038\001\039\001\040\001\
\041\001\042\001\043\001\255\255\045\001\255\255\047\001\002\001\
\049\001\004\001\005\001\255\255\007\001\255\255\255\255\255\255\
\011\001\255\255\255\255\255\255\255\255\001\001\017\001\003\001\
\255\255\005\001\006\001\255\255\008\001\024\001\255\255\026\001\
\027\001\028\001\046\001\015\001\016\001\255\255\255\255\255\255\
\255\255\255\255\255\255\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\045\001\255\255\047\001\255\255\049\001\255\255\
\255\255\255\255\002\001\255\255\004\001\005\001\255\255\007\001\
\044\001\255\255\046\001\011\001\255\255\255\255\001\001\255\255\
\003\001\017\001\005\001\006\001\255\255\008\001\255\255\255\255\
\024\001\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\255\255\045\001\002\001\047\001\
\004\001\049\001\255\255\007\001\255\255\255\255\255\255\011\001\
\255\255\044\001\255\255\046\001\255\255\017\001\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\255\255\045\001\255\255\047\001\002\001\049\001\004\001\005\001\
\255\255\007\001\255\255\255\255\255\255\011\001\255\255\255\255\
\001\001\255\255\003\001\017\001\005\001\006\001\255\255\008\001\
\255\255\255\255\024\001\255\255\026\001\027\001\028\001\016\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\045\001\
\002\001\047\001\004\001\049\001\255\255\007\001\255\255\255\255\
\255\255\011\001\255\255\044\001\255\255\046\001\255\255\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\026\001\027\001\028\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\038\001\039\001\040\001\041\001\
\042\001\043\001\001\001\045\001\255\255\047\001\255\255\049\001\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\001\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\044\001\255\255\046\001\
\255\255\048\001\255\255\002\001\255\255\255\255\255\255\255\255\
\007\001\008\001\255\255\255\255\011\001\044\001\255\255\046\001\
\002\001\048\001\017\001\005\001\255\255\007\001\255\255\255\255\
\255\255\011\001\010\001\011\001\012\001\013\001\255\255\017\001\
\255\255\255\255\018\001\019\001\255\255\021\001\022\001\038\001\
\039\001\040\001\041\001\042\001\043\001\255\255\045\001\255\255\
\047\001\255\255\049\001\255\255\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\045\001\002\001\047\001\255\255\049\001\
\048\001\007\001\255\255\255\255\255\255\011\001\255\255\255\255\
\001\001\255\255\003\001\017\001\005\001\006\001\255\255\008\001\
\255\255\010\001\011\001\012\001\013\001\255\255\015\001\016\001\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\045\001\
\255\255\047\001\255\255\049\001\255\255\001\001\255\255\003\001\
\255\255\005\001\006\001\044\001\008\001\046\001\010\001\011\001\
\012\001\013\001\255\255\015\001\016\001\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\010\001\011\001\012\001\013\001\
\255\255\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\001\001\255\255\003\001\255\255\005\001\006\001\
\044\001\008\001\046\001\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\048\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\255\255\255\255\255\255\001\001\
\255\255\003\001\255\255\005\001\006\001\044\001\008\001\046\001\
\010\001\011\001\012\001\013\001\255\255\015\001\016\001\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\003\001\255\255\005\001\006\001\255\255\008\001\255\255\
\010\001\011\001\044\001\255\255\046\001\015\001\016\001\003\001\
\018\001\019\001\020\001\021\001\022\001\023\001\010\001\011\001\
\012\001\013\001\255\255\015\001\016\001\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\044\001\255\255\046\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\003\001\255\255\
\044\001\255\255\046\001\255\255\048\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\003\001\018\001\019\001\020\001\
\021\001\022\001\023\001\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\044\001\
\255\255\046\001\255\255\048\001\001\001\255\255\003\001\255\255\
\005\001\006\001\255\255\008\001\255\255\044\001\255\255\046\001\
\255\255\048\001\015\001\016\001\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\255\255\003\001\255\255\
\005\001\006\001\255\255\008\001\255\255\255\255\255\255\044\001\
\255\255\046\001\015\001\016\001\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\255\255\003\001\255\255\
\005\001\006\001\255\255\008\001\255\255\255\255\255\255\044\001\
\255\255\046\001\015\001\016\001\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\255\255\003\001\255\255\
\005\001\006\001\255\255\008\001\255\255\255\255\255\255\044\001\
\255\255\046\001\015\001\016\001\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\001\001\255\255\003\001\
\255\255\005\001\006\001\255\255\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\016\001\255\255\255\255\044\001\
\020\001\046\001\255\255\023\001\255\255\255\255\001\001\255\255\
\003\001\255\255\005\001\006\001\255\255\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\255\255\255\255\
\044\001\020\001\046\001\255\255\023\001\005\001\006\001\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\006\001\044\001\008\001\046\001\010\001\011\001\012\001\013\001\
\255\255\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\044\001\255\255\046\001\255\255\
\048\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\044\001\255\255\
\046\001\008\001\048\001\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\010\001\011\001\012\001\013\001\255\255\015\001\016\001\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\044\001\255\255\046\001\
\255\255\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\044\001\255\255\046\001\255\255\048\001\
\010\001\011\001\012\001\013\001\255\255\015\001\016\001\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\010\001\011\001\
\012\001\013\001\255\255\015\001\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\044\001\255\255\255\255\255\255\048\001\255\255\
\255\255\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\255\255\255\255\255\255\048\001\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\048\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LBRACKET\000\
  RBRACKET\000\
  AMP\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  AND\000\
  OR\000\
  NOT\000\
  GT\000\
  LT\000\
  EQ\000\
  GEQ\000\
  LEQ\000\
  NEQ\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  FOR\000\
  RETURN\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  EXEC\000\
  CHR\000\
  STR\000\
  LIST\000\
  FUNCTION\000\
  EOF\000\
  PIPE\000\
  RUN\000\
  EXITCODE\000\
  PATH\000\
  CONS\000\
  LEN\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  CHAR\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 48 "parser.mly"
            ( _1 )
# 574 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
                 ( ([], [], [])               )
# 580 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 52 "parser.mly"
               ( let (vdecls, sdecls, fdecls) = _1 in ((_2 :: vdecls), sdecls, fdecls) )
# 588 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 53 "parser.mly"
              ( let (vdecls, sdecls, fdecls) = _1 in (vdecls, (_2:: sdecls), fdecls) )
# 596 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 54 "parser.mly"
               ( let (vdecls, sdecls, fdecls) = _1 in (vdecls, sdecls, (_2 :: fdecls)) )
# 604 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
          ( Int    )
# 610 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
          ( Bool   )
# 616 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
          ( Float  )
# 622 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
          ( Void   )
# 628 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
          ( Exec   )
# 634 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
         ( Char )
# 640 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
          ( String )
# 646 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
             ( List )
# 652 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
              ( Function )
# 658 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exec) in
    Obj.repr(
# 69 "parser.mly"
                    ( _1 )
# 665 "parser.ml"
               : 'exec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'path) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'eargs_list) in
    Obj.repr(
# 74 "parser.mly"
                         ( Exec(_1, _2) )
# 673 "parser.ml"
               : 'simple_exec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "parser.mly"
                   ( Id(_1) )
# 680 "parser.ml"
               : 'path))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 84 "parser.mly"
                   ( String(_1) )
# 687 "parser.ml"
               : 'path))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cont_eargs_list) in
    Obj.repr(
# 87 "parser.mly"
                           ( _2 )
# 694 "parser.ml"
               : 'eargs_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                  ( [] )
# 700 "parser.ml"
               : 'eargs_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cont_eargs_list) in
    Obj.repr(
# 91 "parser.mly"
                                ( _1 :: _3 )
# 708 "parser.ml"
               : 'cont_eargs_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                       ( [_1] )
# 715 "parser.ml"
               : 'cont_eargs_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cont_list) in
    Obj.repr(
# 99 "parser.mly"
                       ( _2 )
# 722 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                       ( EmptyList )
# 728 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cont_list) in
    Obj.repr(
# 103 "parser.mly"
                          ( List((_1, _3)) )
# 736 "parser.ml"
               : 'cont_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                          ( List((_1, EmptyList)) )
# 743 "parser.ml"
               : 'cont_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                            ( Idop(_1, _3, Index) )
# 751 "parser.ml"
               : 'index))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
               ( Idop(_3, _1, Cons) )
# 759 "parser.ml"
               : 'list_cons))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
         ( Iduop(_2, Length) )
# 766 "parser.ml"
               : 'list_length))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 118 "parser.mly"
     ( { typ = _1;
	fname = _2;
	formals = List.rev _4;
    locals = List.rev _7;
	body = List.rev _8; } )
# 781 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "parser.mly"
                  ( [] )
# 787 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 126 "parser.mly"
                  ( _1 )
# 794 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 129 "parser.mly"
                             ( [(_1,_2)]     )
# 802 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 130 "parser.mly"
                             ( (_3,_4) :: _1 )
# 811 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
                     ( [] )
# 817 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 134 "parser.mly"
                     ( _2 :: _1 )
# 825 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 137 "parser.mly"
               ( (_1, _2) )
# 833 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 148 "parser.mly"
                                       ( [] )
# 839 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 149 "parser.mly"
                   ( _2 :: _1 )
# 847 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
                                            ( Expr _1               )
# 854 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 153 "parser.mly"
                                            ( Return _2             )
# 861 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 154 "parser.mly"
                                            ( Block(List.rev _2)    )
# 868 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 155 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 876 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 156 "parser.mly"
                                            ( If(_3, _5, _7)        )
# 885 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 158 "parser.mly"
                                            ( For(_3, _5, _7, _9)   )
# 895 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 159 "parser.mly"
                                            ( While(_3, _5)         )
# 903 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "parser.mly"
                  ( Noexpr )
# 909 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
                  ( _1 )
# 916 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 167 "parser.mly"
                     ( Literal(_1)            )
# 923 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 168 "parser.mly"
                  ( Fliteral(_1)           )
# 930 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 169 "parser.mly"
                     ( BoolLit(_1)            )
# 937 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 170 "parser.mly"
                    ( Id(_1)                 )
# 944 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 171 "parser.mly"
                     ( Char(_1) )
# 951 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 172 "parser.mly"
                      ( String(_1) )
# 958 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
                     ( Binop(_1, Add,   _3)   )
# 966 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                     ( Binop(_1, Sub,   _3)   )
# 974 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                     ( Binop(_1, Mult,  _3)   )
# 982 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "parser.mly"
                     ( Binop(_1, Div,   _3)   )
# 990 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                     ( Binop(_1, Equal, _3)   )
# 998 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                     ( Binop(_1, Neq,   _3)   )
# 1006 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                              ( Binop(_1, Less,  _3)   )
# 1014 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                              ( Binop(_1, Leq,   _3)   )
# 1022 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
                              ( Binop(_1, Greater, _3) )
# 1030 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                              ( Binop(_1, Geq,   _3)   )
# 1038 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                              ( Binop(_1, And,   _3)   )
# 1046 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 184 "parser.mly"
                              ( Binop(_1, Or,    _3)   )
# 1054 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
                              ( Binop(_1, Pipe, _3) )
# 1062 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 186 "parser.mly"
                              ( PreUnop(Neg, _2)          )
# 1069 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                              ( PreUnop(Not, _2)          )
# 1076 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 188 "parser.mly"
                              ( Assign(_1, _3)         )
# 1084 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 189 "parser.mly"
                              ( Call(_1, _3)  )
# 1092 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 190 "parser.mly"
                              ( _2                   )
# 1099 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 191 "parser.mly"
                              ( PostUnop(_1, ExitCode) )
# 1106 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'index) in
    Obj.repr(
# 192 "parser.mly"
                              ( _1 )
# 1113 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 193 "parser.mly"
                             ( PreUnop(Path, _2) )
# 1120 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 194 "parser.mly"
                              ( PreUnop(Run, _2) )
# 1127 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exec) in
    Obj.repr(
# 195 "parser.mly"
                              ( _1 )
# 1134 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list) in
    Obj.repr(
# 196 "parser.mly"
                              ( _1 )
# 1141 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_cons) in
    Obj.repr(
# 197 "parser.mly"
                                   ( _1 )
# 1148 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_length) in
    Obj.repr(
# 198 "parser.mly"
                                   ( _1 )
# 1155 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "parser.mly"
                  ( [] )
# 1161 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 202 "parser.mly"
               ( List.rev _1 )
# 1168 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 205 "parser.mly"
                            ( [_1] )
# 1175 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 206 "parser.mly"
                         ( _3 :: _1 )
# 1183 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
