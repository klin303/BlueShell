Making....
make: Nothing to be done for `all'.
ABOUT TO RUN 1 TESTS.....
test-for1
RUNNING TEST test-for1......
File tests/gsts/test-for1.gst does not exist
test-floatarith1
RUNNING TEST test-floatarith1......
File tests/gsts/test-floatarith1.gst does not exist
test-printbools1
RUNNING TEST test-printbools1......
File tests/gsts/test-printbools1.gst does not exist
test-assign2
RUNNING TEST test-assign2......
PASSED 

test-if1
RUNNING TEST test-if1......
File tests/gsts/test-if1.gst does not exist
test-assign3
RUNNING TEST test-assign3......
PASSED 

test-echo1
RUNNING TEST test-echo1......
PASSED 

test-while1
RUNNING TEST test-while1......
File tests/gsts/test-while1.gst does not exist
test-list1
RUNNING TEST test-list1......
File tests/gsts/test-list1.gst does not exist
test-compile
RUNNING TEST test-compile......
ERROR: OUTPUT FOR test-compile DOES NOT MATCH EXPECTED OUTPUT 
 
2c2
< -1
\ No newline at end of file
---
> hello world
test-charfunc1
RUNNING TEST test-charfunc1......
File tests/gsts/test-charfunc1.gst does not exist
test-hofs1
RUNNING TEST test-hofs1......
File tests/gsts/test-hofs1.gst does not exist
test-execcopy1
RUNNING TEST test-execcopy1......
File tests/gsts/test-execcopy1.gst does not exist
test-compop1
RUNNING TEST test-compop1......
File tests/gsts/test-compop1.gst does not exist
test-boolops1
RUNNING TEST test-boolops1......
File tests/gsts/test-boolops1.gst does not exist
test-function1
RUNNING TEST test-function1......
PASSED 

test-block1
RUNNING TEST test-block1......
File tests/gsts/test-block1.gst does not exist
test-printfloat1
RUNNING TEST test-printfloat1......
File tests/gsts/test-printfloat1.gst does not exist
test-arith1
RUNNING TEST test-arith1......
File tests/gsts/test-arith1.gst does not exist
test-hofs3
RUNNING TEST test-hofs3......
File tests/gsts/test-hofs3.gst does not exist
test-neg1
RUNNING TEST test-neg1......
File tests/gsts/test-neg1.gst does not exist
test-stringfunc1
RUNNING TEST test-stringfunc1......
File tests/gsts/test-stringfunc1.gst does not exist
test-cat1
RUNNING TEST test-cat1......
ERROR: OUTPUT FOR test-cat1 DOES NOT MATCH EXPECTED OUTPUT 
 
11,12c11,17
< test-arith1.bs
<     Creates two integer variables, does addition on them, and creates an executable with path "echo" and one integer argument 
---
> test-ls.bs:
>     Creates and runs an executable with path 'ls' and no arguments
> 
> test-compile.bs:
>     Creates and runs a BlueShell executable which compiles a BlueShell program.
>     It then creates and runs a BlueShell executable which runs the compiled
>     program.
14c19,23
< test-assign1.bs
---
> test-echo.bs
>     Creates an executable with a single string argument and executes it without
>     storing the executable in a variable.
> 
> test-assign2.bs
18,19c27,28
< test-assign2.bs
<     Declares a string variable, then assigns a string value to
---
> test-assign3.bs
>     Declares a string variable then in another line assigns a string value to
23c32
< test-assign3.bs
---
> test-assign4.bs
27,50c36
< test-boolops1.bs 
<     Tests the boolean operations &&, ||, and, or, and prints out the results of each. 
< 
< test-cat1.bs
<     Creates an executable with two string arguments. Executes it to demonstrate
<     that multiple arguments work.
< 
< test-charfunc1.bs
<     Tests the char type by printing out chars and 
<     also printing out variable of type char
< 
< test-compile.bs:
<     Creates and runs a BlueShell executable which compiles a BlueShell program.
<     It then creates and runs a BlueShell executable which runs the compiled
<     program.
< 
< test-compop1.bs 
<     Tests integer comparison operators (<, >, <=, >=, ==, and !=) and prints out the resulting boolean 
< 
< test-echo1.bs
<     Creates an executable with a single string argument and executes it without
<     storing the executable in a variable.
< 
< test-echo2.bs
---
> test-echo3.bs
54,61c40,42
< test-execcopy1.bs
<     Declares an executable with one argument and assigns it to a variable. Creates a new executable variable by assigning it to the initial executable made. Executes the second executable. 
< 
< test-execcopy2 
<     Declares a string variable. Declares an executable variable of one argument of the string variable. Creates a new executable variable by assigning it to the initial executable made. Executes the second executable. 
< 
< test-floatarith1 
<     Tests our code can handle floats and all four arithmetic operations on floats to ensure they work and print out the result of each operation. 
---
> test-cat2.bs
>     Creates an executable with two string arguments. Executes it to demonstrate
>     that multiple arguments work.
67,79d47
< test-hofs1.bs 
<     Tests higher order functions by assigning a variable to an existing function and calling that function through the variable.  
< 
< 
< test-hofs2.bs 
<     Tests higher order functions by passing defining a function that takes in another function as a parameter and calls the parameter function. 
< 
< test-hof3.bs 
<     Tests higher order functions by by declaring two function variables of the same type, assigning one two a function, assigning the second to the first function variable, then calling the second. 
< 
< test-if1.bs
<     Tests if statements by 
< 
84,106d51
< test-ls.bs:
<     Creates and runs an executable with path 'ls' and no arguments
< 
< tests-neg1.bs 
< 
< tests-not1.bs 
< 
< test-printbools1.bs 
< 
< test-printfloat1.bs 
< 
< tests-printints.bs 
< 
< tests-returnfunc1.bs 
< 
< tests-string1.bs 
< 
< test-stringfunc1.bs 
< 
< 
< 
< FAILS 
< 
166,167c111,117
< test-arith1.bs
<     Creates two integer variables, does addition on them, and creates an executable with path "echo" and one integer argument 
---
> test-ls.bs:
>     Creates and runs an executable with path 'ls' and no arguments
> 
> test-compile.bs:
>     Creates and runs a BlueShell executable which compiles a BlueShell program.
>     It then creates and runs a BlueShell executable which runs the compiled
>     program.
169c119,123
< test-assign1.bs
---
> test-echo.bs
>     Creates an executable with a single string argument and executes it without
>     storing the executable in a variable.
> 
> test-assign2.bs
173,174c127,128
< test-assign2.bs
<     Declares a string variable, then assigns a string value to
---
> test-assign3.bs
>     Declares a string variable then in another line assigns a string value to
178c132
< test-assign3.bs
---
> test-assign4.bs
182,205c136
< test-boolops1.bs 
<     Tests the boolean operations &&, ||, and, or, and prints out the results of each. 
< 
< test-cat1.bs
<     Creates an executable with two string arguments. Executes it to demonstrate
<     that multiple arguments work.
< 
< test-charfunc1.bs
<     Tests the char type by printing out chars and 
<     also printing out variable of type char
< 
< test-compile.bs:
<     Creates and runs a BlueShell executable which compiles a BlueShell program.
<     It then creates and runs a BlueShell executable which runs the compiled
<     program.
< 
< test-compop1.bs 
<     Tests integer comparison operators (<, >, <=, >=, ==, and !=) and prints out the resulting boolean 
< 
< test-echo1.bs
<     Creates an executable with a single string argument and executes it without
<     storing the executable in a variable.
< 
< test-echo2.bs
---
> test-echo3.bs
209,216c140,142
< test-execcopy1.bs
<     Declares an executable with one argument and assigns it to a variable. Creates a new executable variable by assigning it to the initial executable made. Executes the second executable. 
< 
< test-execcopy2 
<     Declares a string variable. Declares an executable variable of one argument of the string variable. Creates a new executable variable by assigning it to the initial executable made. Executes the second executable. 
< 
< test-floatarith1 
<     Tests our code can handle floats and all four arithmetic operations on floats to ensure they work and print out the result of each operation. 
---
> test-cat2.bs
>     Creates an executable with two string arguments. Executes it to demonstrate
>     that multiple arguments work.
222,234d147
< test-hofs1.bs 
<     Tests higher order functions by assigning a variable to an existing function and calling that function through the variable.  
< 
< 
< test-hofs2.bs 
<     Tests higher order functions by passing defining a function that takes in another function as a parameter and calls the parameter function. 
< 
< test-hof3.bs 
<     Tests higher order functions by by declaring two function variables of the same type, assigning one two a function, assigning the second to the first function variable, then calling the second. 
< 
< test-if1.bs
<     Tests if statements by 
< 
239,261d151
< test-ls.bs:
<     Creates and runs an executable with path 'ls' and no arguments
< 
< tests-neg1.bs 
< 
< tests-not1.bs 
< 
< test-printbools1.bs 
< 
< test-printfloat1.bs 
< 
< tests-printints.bs 
< 
< tests-returnfunc1.bs 
< 
< tests-string1.bs 
< 
< test-stringfunc1.bs 
< 
< 
< 
< FAILS 
< 
test-returnfunc1
RUNNING TEST test-returnfunc1......
File tests/gsts/test-returnfunc1.gst does not exist
test-execcopy2
RUNNING TEST test-execcopy2......
File tests/gsts/test-execcopy2.gst does not exist
test-hofs2
RUNNING TEST test-hofs2......
File tests/gsts/test-hofs2.gst does not exist
test-ls
RUNNING TEST test-ls......
ERROR: OUTPUT FOR test-ls DOES NOT MATCH EXPECTED OUTPUT 
 
20,22d19
< test-arith1.exe
< test-arith1.llvm
< test-arith1.llvm.s
29,40c26,28
< test-block1.exe
< test-block1.llvm
< test-block1.llvm.s
< test-boolops1.exe
< test-boolops1.llvm
< test-boolops1.llvm.s
< test-cat1.exe
< test-cat1.llvm
< test-cat1.llvm.s
< test-charfunc1.exe
< test-charfunc1.llvm
< test-charfunc1.llvm.s
---
> test-cat2.exe
> test-cat2.llvm
> test-cat2.llvm.s
44,61c32,41
< test-compop1.exe
< test-compop1.llvm
< test-compop1.llvm.s
< test-echo1.exe
< test-echo1.llvm
< test-echo1.llvm.s
< test-execcopy1.exe
< test-execcopy1.llvm
< test-execcopy1.llvm.s
< test-execcopy2.exe
< test-execcopy2.llvm
< test-execcopy2.llvm.s
< test-floatarith1.exe
< test-floatarith1.llvm
< test-floatarith1.llvm.s
< test-for1.exe
< test-for1.llvm
< test-for1.llvm.s
---
> test-echo.exe
> test-echo.llvm
> test-echo.llvm.s
> test-echo3.exe
> test-echo3.gst
> test-echo3.llvm
> test-echo3.llvm.s
> test-exec2.exe
> test-exec2.llvm
> test-exec2.llvm.s
65,79d44
< test-hofs1.exe
< test-hofs1.llvm
< test-hofs1.llvm.s
< test-hofs2.exe
< test-hofs2.llvm
< test-hofs2.llvm.s
< test-hofs3.exe
< test-hofs3.llvm
< test-hofs3.llvm.s
< test-if1.exe
< test-if1.llvm
< test-if1.llvm.s
< test-list1.exe
< test-list1.llvm
< test-list1.llvm.s
84,101d48
< test-neg1.exe
< test-neg1.llvm
< test-neg1.llvm.s
< test-printbools1.exe
< test-printbools1.llvm
< test-printbools1.llvm.s
< test-printfloat1.exe
< test-printfloat1.llvm
< test-printfloat1.llvm.s
< test-returnfunc1.exe
< test-returnfunc1.llvm
< test-returnfunc1.llvm.s
< test-stringfunc1.exe
< test-stringfunc1.llvm
< test-stringfunc1.llvm.s
< test-while1.exe
< test-while1.llvm
< test-while1.llvm.s
104d50
< tests.txt
test-string1
RUNNING TEST test-string1......
File tests/gsts/test-string1.gst does not exist
test-echo2
RUNNING TEST test-echo2......
PASSED 

test-intarith1
RUNNING TEST test-intarith1......
File tests/gsts/test-intarith1.gst does not exist
test-list2
RUNNING TEST test-list2......
ERROR: OUTPUT FOR test-list2 DOES NOT MATCH EXPECTED OUTPUT 
 
0a1,201
> BlueShell
> 
> Kenneth Lin (kenneth.lin@tufts.edu)
> Alan Luc (alan.luc@tufts.edu)
> Tina Ma (tina.ma@tufts.edu)
> Mary-Joy Sidhom (mary-joy.sidhom@tufts.edu)
> 
> *** Testing Suite ***
> NOTE: There are separate semantic tests in the directory sast-tests
> 
> test-ls.bs:
>     Creates and runs an executable with path 'ls' and no arguments
> 
> test-compile.bs:
>     Creates and runs a BlueShell executable which compiles a BlueShell program.
>     It then creates and runs a BlueShell executable which runs the compiled
>     program.
> 
> test-echo.bs
>     Creates an executable with a single string argument and executes it without
>     storing the executable in a variable.
> 
> test-assign2.bs
>     Creates an executable with a single string argument and stores it in an
>     executable variable. It then runs the executable using the variable.
> 
> test-assign3.bs
>     Declares a string variable then in another line assigns a string value to
>     the variable. Verifies assignment by printing the output of the string
>     variable.
> 
> test-assign4.bs
>     Declares and assigns a value to a string variable in a single line. Verifies
>     assignment by printing out the string variable.
> 
> test-echo3.bs
>     Creates a string list with one element and stores it in a list variable.
>     Creates an executable using the list variable and executes it.
> 
> test-cat2.bs
>     Creates an executable with two string arguments. Executes it to demonstrate
>     that multiple arguments work.
> 
> test-function1.bs
>     Creates a function that runs the echo command and calls the function.
>     This is a function with no arguments and no return type.
> 
> test-list2.bs
>     Stores a list with two string arguments in a list variable. Creates an
>     executable using the list variable and executes it.
> 
> fail-list1.bs
>     Creates a list of strings but attempts to store an int element.
> 
> fail-arith1.bs
>     Detects mismatched types in an arithmetic operation.
> 
> fail-exec1.bs
>     Detects a non-executable type used with run.
> 
> *** Compiling the BlueShell Compiler ***
> To compile the BlueShell Compiler, run:
>   make
> 
> *** Run and Validate Tests ***
> To run and validate all tests:
> ./testall.sh -a
> 
> To run and validate a single test:
> ./testall.sh -s {test-name}
> 
> where test-name is a file in the tests directory without the .bs extension
> (you don't need the path to the file, just the file name).
> 
> Example:
> ./testall.sh -s test-ls
> 
> To keep intermediate output files produced during compilation (.s and .llvm files):
> ./testall.sh -a -keepc
> 
> To keep intermediate output files produced during testing (.out and .diff files):
> ./testall.sh -a -keept
> 
> 
> *** Interpreting Testing Results ***
> The testall script validates that a BlueShell program succeeds at every step of
> compilation.
> If no errors occur, there will be no observable output.
> If an error occurs during compilation, the testall script prints the error and
> exits.
> 
> If a test's output matches the gold standard, testall will print 'PASSED'.
> If a test's output does not match the gold standard, testall will print an error
> and the differences between the gold standard and the output.
> 
> *** Compiling a BlueShell program ***
> You can compile a BlueShell program with the following command:
> 
> ./compile.sh {input_file}.bs
> 
> This produces a file named {input_file}.exe, which can be run using ./{input_file}.exeBlueShell
> 
> Kenneth Lin (kenneth.lin@tufts.edu)
> Alan Luc (alan.luc@tufts.edu)
> Tina Ma (tina.ma@tufts.edu)
> Mary-Joy Sidhom (mary-joy.sidhom@tufts.edu)
> 
> *** Testing Suite ***
> NOTE: There are separate semantic tests in the directory sast-tests
> 
> test-ls.bs:
>     Creates and runs an executable with path 'ls' and no arguments
> 
> test-compile.bs:
>     Creates and runs a BlueShell executable which compiles a BlueShell program.
>     It then creates and runs a BlueShell executable which runs the compiled
>     program.
> 
> test-echo.bs
>     Creates an executable with a single string argument and executes it without
>     storing the executable in a variable.
> 
> test-assign2.bs
>     Creates an executable with a single string argument and stores it in an
>     executable variable. It then runs the executable using the variable.
> 
> test-assign3.bs
>     Declares a string variable then in another line assigns a string value to
>     the variable. Verifies assignment by printing the output of the string
>     variable.
> 
> test-assign4.bs
>     Declares and assigns a value to a string variable in a single line. Verifies
>     assignment by printing out the string variable.
> 
> test-echo3.bs
>     Creates a string list with one element and stores it in a list variable.
>     Creates an executable using the list variable and executes it.
> 
> test-cat2.bs
>     Creates an executable with two string arguments. Executes it to demonstrate
>     that multiple arguments work.
> 
> test-function1.bs
>     Creates a function that runs the echo command and calls the function.
>     This is a function with no arguments and no return type.
> 
> test-list2.bs
>     Stores a list with two string arguments in a list variable. Creates an
>     executable using the list variable and executes it.
> 
> fail-list1.bs
>     Creates a list of strings but attempts to store an int element.
> 
> fail-arith1.bs
>     Detects mismatched types in an arithmetic operation.
> 
> fail-exec1.bs
>     Detects a non-executable type used with run.
> 
> *** Compiling the BlueShell Compiler ***
> To compile the BlueShell Compiler, run:
>   make
> 
> *** Run and Validate Tests ***
> To run and validate all tests:
> ./testall.sh -a
> 
> To run and validate a single test:
> ./testall.sh -s {test-name}
> 
> where test-name is a file in the tests directory without the .bs extension
> (you don't need the path to the file, just the file name).
> 
> Example:
> ./testall.sh -s test-ls
> 
> To keep intermediate output files produced during compilation (.s and .llvm files):
> ./testall.sh -a -keepc
> 
> To keep intermediate output files produced during testing (.out and .diff files):
> ./testall.sh -a -keept
> 
> 
> *** Interpreting Testing Results ***
> The testall script validates that a BlueShell program succeeds at every step of
> compilation.
> If no errors occur, there will be no observable output.
> If an error occurs during compilation, the testall script prints the error and
> exits.
> 
> If a test's output matches the gold standard, testall will print 'PASSED'.
> If a test's output does not match the gold standard, testall will print an error
> and the differences between the gold standard and the output.
> 
> *** Compiling a BlueShell program ***
> You can compile a BlueShell program with the following command:
> 
> ./compile.sh {input_file}.bs
> 
> This produces a file named {input_file}.exe, which can be run using ./{input_file}.exe
\ No newline at end of file
test-not1
RUNNING TEST test-not1......
File tests/gsts/test-not1.gst does not exist
test-printints
RUNNING TEST test-printints......
File tests/gsts/test-printints.gst does not exist
test-assign1
RUNNING TEST test-assign1......
PASSED 

Running failure test fail-block1...........
PASSED 

Running failure test fail-exec1...........
PASSED 

Running failure test fail-arith1...........
PASSED 

Running failure test fail-list1...........
PASSED 

Removing all intermediate outputs (.s, .llvm, .exes, .out, and .diff) files...
rm -rf *.s *.llvm
rm -rf tests/diff/*.diff tests/out/*.out
rm -rf *.exe
Done. Bye!
